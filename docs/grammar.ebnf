program = { statement } EOF;

(*** statements ***)
(* abstract *)
statement = "{" { statement } "}"; (* compound statement *)
statement = variable_definition | variable_assignment;
statement = if_statement | while_statement | break_statement | continue_statement;
statement = function_definition | return_statement | call_statement;

(* concrete *)
chunk = statement | "{" { statement } "}";
variable_definition = "def" identifier "=" expression;
variable_assignment = identifier "=" expression;
if_statement = "if" "(" expression ")" chunk ["else" chunk];
while_statement = "while" "(" expression ")" chunk;
break_statement = "break";
continue_statement = "continue";
function_definition = "def" identifier "(" [variable_declaration { "," variable_declaration } [","]] ")" "{" { statement } "}";
function_parameter = identifier ":" type;
return_statement = "return" [expression];
call_statement = call_expression;

(*** expressions ***)
(* abstract *)
expression = "(" expression ")";
expression = primary_expression | unary_expression | binary_expression; (* operator-precedence parsing *)
primary_expression = nil_literal | bool_literal | real_literal | string_literal | identifier | call_expression;

(* concrete *)
nil_literal = "nil";
bool_literal = "true" | "false";
real_literal = DIGIT { DIGIT } "." { DIGIT } | "." DIGIT { DIGIT };
string_literal = "'" { GRAPHICAL | " " | "\t" } "'" | '"' { GRAPHICAL | " " | "\t" } '"';
identifier = { ALPHABETICAL | "$" | "_" } { ALPHANUMERIC | "$" | "_" };
call_expression = identifier "(" [expression { "," expression } [","]] ")";
unary_expression = ("-" | "!") expression;
binary_expression = expression ("+" | "-" | "*" | "/" | "%" | "<" | ">" | "<=" | ">=" | "==" | "!=" | "||" | "&&") expression;

(*** types ***)
(* abstract *)
type = primitive_type | function_type;
primitive_type = nil_type | bool_type | real_type | string_type;

(* concrete *)
nil_type = "Nil";
bool_type = "Bool";
real_type = "Real";
string_type = "String";
function_type = "(" [{ type "," } type [","]] ")" "->" type;
